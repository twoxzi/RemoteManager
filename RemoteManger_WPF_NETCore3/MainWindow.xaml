<Window x:Class="Twoxzi.RemoteManager.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Twoxzi.RemoteManager"
        xmlns:bhv="http://schemas.microsoft.com/xaml/behaviors"
        mc:Ignorable="d"
        Title="远程账户管理工具" Height="400" Width="634" 
        >
    <Window.DataContext>
        <local:MainWindowViewModel></local:MainWindowViewModel>
    </Window.DataContext>
    <Window.Resources>
        <local:DateTimeValueConverter x:Key="DateTimeValueConverter" />

        <!--获得焦点后边框颜色-->
        <SolidColorBrush x:Key="FocusedBorderBrush" Color="Black"/>
        <!--鼠标移上时背景色-->
        <SolidColorBrush x:Key="MouseOverBackground" Color="LightGray"/>

        <!--清空按钮模板样式-->
        <ControlTemplate x:Key="ClearButtonTemplate" TargetType="Button">
            <Grid>
                <Rectangle x:Name="rctButton" Fill="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Rectangle>
                <ContentPresenter Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                  HorizontalAlignment="Center" 
                                  VerticalAlignment="Center">
                </ContentPresenter>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="rctButton" Property="Fill" Value="{DynamicResource MouseOverBackground}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True"/>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--带有清空按钮的TextBox风格-->
        <Style x:Key="ClearButtonTextBoxStyle" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="bdRoot" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            Background="{TemplateBinding Background}">
                            <DockPanel LastChildFill="True">
                                <Button x:Name="Part_ClearButton" 
                                    local:TextBoxHelper.IsClearButton="True"
                                    Content="X" 
                                    DockPanel.Dock="Right" 
                                    Focusable="False"
                                    Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" 
                                    Template="{DynamicResource ClearButtonTemplate}"
                                    FontSize="{TemplateBinding FontSize}">
                                </Button>

                                <ScrollViewer x:Name="PART_ContentHost" DockPanel.Dock="Left" Background="{TemplateBinding Background}"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                <Setter TargetName="Part_ClearButton" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="bdRoot" Property="BorderBrush" Value="{DynamicResource FocusedBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="bdRoot" Property="BorderBrush" Value="{DynamicResource FocusedBorderBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--————————————————
版权声明：本文为CSDN博主「颜家大饼」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/u012559285/java/article/details/50921460-->
    </Window.Resources>
    <DockPanel>
        <GroupBox Header="详细信息" DockPanel.Dock="Right">
            <DockPanel MaxWidth="200">
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                    <Button Content="保存" Margin="10,0,5,0" Command="{Binding SaveCommand}" CommandParameter="{Binding ElementName=listView}" />
                    <Button Content="删除" Margin="10,0,5,0"  Command="{Binding DeleteCommand}" CommandParameter="{Binding ElementName=listView}" />
                    <Button Content="打开" Margin="10,0,5,0"  Command="{Binding LinkCommand}" CommandParameter="{Binding ElementName=listView}" />
                </StackPanel>
                <TextBlock Text="ID：" DockPanel.Dock="Top"/>
                <TextBox Text="{Binding ElementName=listView,Path=SelectedItem.ID ,UpdateSourceTrigger=PropertyChanged}"  DockPanel.Dock="Top"/>
                <TextBlock Text="密码：" DockPanel.Dock="Top"/>
                <TextBox Text="{Binding ElementName=listView,Path=SelectedItem.Password ,UpdateSourceTrigger=PropertyChanged}" DockPanel.Dock="Top"/>
                <TextBlock Text="显示名称：" DockPanel.Dock="Top"/>
                <TextBox Text="{Binding ElementName=listView,Path=SelectedItem.DisplayName ,UpdateSourceTrigger=PropertyChanged}" DockPanel.Dock="Top"/>
                <TextBlock Text="分组名称：" DockPanel.Dock="Top"/>
                <TextBox Text="{Binding ElementName=listView,Path=SelectedItem.GroupName ,UpdateSourceTrigger=PropertyChanged}" DockPanel.Dock="Top"/>
                <TextBlock Text="工具：" DockPanel.Dock="Top"/>
                <ComboBox ItemsSource="{Binding RemoteToolMetadataList}" DockPanel.Dock="Top" SelectedItem="{Binding ElementName=listView,Path=SelectedItem.RemoteToolMetadata}"  >
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <ListBoxItem Content="{Binding ToolName}" ToolTip="{Binding Memo}" >
                            </ListBoxItem>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                <Button DockPanel.Dock="Top" Content="设置扩展属性" Command="{Binding ExtensionSettingsCommand}" CommandParameter="{Binding ElementName=listView,Path=SelectedItem}"/>
                <TextBlock Text="备注：" DockPanel.Dock="Top"/>
                <TextBox Text="{Binding ElementName=listView,Path=SelectedItem.Memo ,UpdateSourceTrigger=PropertyChanged}" 
                         MaxWidth="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=DockPanel},Path=MaxWidth }"
                         TextWrapping="WrapWithOverflow" AcceptsReturn="True" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Visible"/>
            </DockPanel>
        </GroupBox>
        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
            <TextBox Name="txtSearch"   Margin="5" Width="200px" Text="{Binding SearchText,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource ClearButtonTextBoxStyle}" />
            <Button Content="新增" Margin="5" Command="{Binding AddCommand}" CommandParameter="{Binding ElementName=listView}" />
            <CheckBox Content="分组" Margin="5" Name="cbxIsGroup" IsChecked="{Binding Path=IsGroup ,Mode=TwoWay}" ></CheckBox>
        </StackPanel>
        <ListView x:Name="listView"  HorizontalAlignment="Left"  VerticalAlignment="Top" DockPanel.Dock="Left" ItemsSource="{Binding Path= Collection}"
                  >
            <bhv:Interaction.Triggers>
                <bhv:EventTrigger EventName="MouseDoubleClick">
                    <bhv:InvokeCommandAction Command="{Binding DataContext.LinkCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Window}}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ListView}}" ></bhv:InvokeCommandAction>
                </bhv:EventTrigger>
            </bhv:Interaction.Triggers>
            <ListView.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="导出"  Command="{Binding OutputCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu},Path=PlacementTarget}" ></MenuItem>
                </ContextMenu>
            </ListView.ContextMenu>
            <!--分组合并style-->
            <ListView.GroupStyle>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Margin" Value="0,0,0,5"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type GroupItem}">
                                        <Expander IsExpanded="True" BorderBrush="#FF1975A0" BorderThickness="2">
                                            <Expander.Header>
                                                <DockPanel>
                                                    <TextBlock FontWeight="Bold" Text="{Binding Path=Name,Mode=OneWay}" 
                                                               Margin="5,0,0,0" Width="auto"/>
                                                    <TextBlock FontWeight="Bold" Text="("/>
                                                    <TextBlock FontWeight="Bold" Text="{Binding Path=ItemCount}"/>
                                                    <TextBlock FontWeight="Bold" Text="项)"/>
                                                </DockPanel>
                                            </Expander.Header>
                                            <Expander.Content>
                                                <ItemsPresenter/>
                                            </Expander.Content>
                                        </Expander>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </ListView.GroupStyle>
            <ListView.View>
                <GridView local:GridViewColumns.HeaderTextMember="Header" 
                          local:GridViewColumns.DisplayMemberMember="PropertyName" 
                          local:GridViewColumns.WidthMember="Width"
                          local:GridViewColumns.ColumnsSource="{Binding Columns}" >
                    <GridView.ColumnHeaderTemplate>
                        <DataTemplate>
                            <DockPanel Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=GridViewColumnHeader},Path=Width}">
                                <StackPanel DockPanel.Dock="Right" Margin="5,0,0,0">
                                    <Button  Content="▲"  Margin="0,0,0,1" Command="{Binding DataContext.DescColumnCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Window}}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=GridViewColumnHeader}}" >
                                        <Button.Template>
                                            <ControlTemplate>
                                                <Border BorderBrush="Gray" BorderThickness="0.8" Background="Wheat">
                                                    <Path Fill="Black" Data="M 4,0 L 8,8 L 0,8 Z"></Path>
                                                </Border>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>
                                    <Button Content="▼" Command="{Binding DataContext.AscColumnCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Window}}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=GridViewColumnHeader}}" >
                                        <Button.Template>
                                            <ControlTemplate>
                                                <Border BorderBrush="Gray" BorderThickness="0.8" Background="Wheat">
                                                    <Path Fill="Black" Data="M 0,0  L 4,8 L 8,0 Z"></Path>
                                                </Border>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>
                                </StackPanel>
                                <TextBlock Text="{Binding }" MinWidth="{Binding Path=Header}" />
                            </DockPanel>
                        </DataTemplate>
                    </GridView.ColumnHeaderTemplate>
                </GridView>
            </ListView.View>
        </ListView>
    </DockPanel>
</Window>
